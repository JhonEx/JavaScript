const realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];
const squareList = (arr) => {
  "use strict";
  // change code below this line
  const squaredIntegers = arr.filter(read => read % 1 === 0 && read > 0).map(squa => Math.pow(squa,2));

  const squaredIntegers2 = arr.filter(read => read>0 && read % parseInt(read)===0).map(read => Math.pow(read,2));

  // change code above this line
  console.log(squaredIntegers);
  
  console.log(squaredIntegers2);

  return squaredIntegers;
  
};
// test your code
const squaredIntegers = squareList(realNumberArray);

    
    //// More examples: ////////////////////////////////////////////////////////////////////////////////////  
    
// What you have
var officers = [
  { id: 20, name: 'Captain Piett' },
  { id: 24, name: 'General Veers' },
  { id: 56, name: 'Admiral Ozzel' },
  { id: 88, name: 'Commander Jerjerrod' }
];

//for each method.
const offi = [];
officers.forEach( function (reader){
  offi.push(reader.id)
})
console.log (offi);

//Using arrow functions, .map () -long expresion.
const offMap = officers.map(function (reader){
    return reader.id;
});
console.log(offMap);

//Using arrow functions, .map () -short expresion.
const offmap1 = officers.map(officers =>officers.id);
console.log (offmap1);

var pilots = [
  {
    id: 10,
    name: "Poe Test Dameron",
    years: 14,
  },
  {
    id: 2,
    name: "Temmin  Test 'Snap' Wexley",
    years: 30,
  },
  {
    id: 41,
    name: "Tallissan Test Lintra",
    years: 16,
  },
  {
    id: 99,
    name: "Ello Test Asty",
    years: 22,
  }
];
// Using arrow function reduce, long version
const yearExp = pilots.reduce( function (accumulator, pilot){
  return accumulator + pilot.years;
},0);
console.log("Result " +yearExp);

// Using arrow function reduce, shorten version
const YearExp1 = pilots.reduce( (acc, pilot) => acc + pilot.years,0);
console.log(YearExp1);

//Using arrow funtion reduce, longer version
const MostExpePilot = pilots.reduce( function(oldest, pilo){
  return  oldest.years > pilo.years ? oldest : pilo;
});
console.log("Years " + MostExpePilot.years);

//Using arrow funtion reduce, shorten version
const MostExpePilot1 = pilots.reduce( (old, pil) => old.years > pil.years ? old : pil);
console.log("Years shorten " + MostExpePilot1.years);

//Using arrow funtion filter, longer version

const filterYears = pilots.filter(function (Picker){
  return Picker.name.includes("Test");
});
console.log(filterYears[0].id);


//////////////////////////////////////// Combining .map(), .reduce(), and .filter() ///

var personnel = [
  {
    id: 5,
    name: "Luke Skywalker",
    pilotingScore: 98,
    shootingScore: 56,
    isForceUser: true,
  },
  {
    id: 82,
    name: "Sabine Wren",
    pilotingScore: 73,
    shootingScore: 99,
    isForceUser: false,
  },
  {
    id: 22,
    name: "Zeb Orellios",
    pilotingScore: 20,
    shootingScore: 59,
    isForceUser: false,
  },
  {
    id: 15,
    name: "Ezra Bridger",
    pilotingScore: 43,
    shootingScore: 67,
    isForceUser: true,
  },
  {
    id: 11,
    name: "Caleb Dume",
    pilotingScore: 71,
    shootingScore: 85,
    isForceUser: true,
  },
];

const totalScore = personnel.filter(person => person.isForceUser).reduce((acc,pilots) => acc + pilots.pilotingScore + pilots.shootingScore,0);
console.log(totalScore);

const totalJediScore = personnel.filter(person => person.isForceUser).map(jedi => jedi.pilotingScore + jedi.shootingScore).reduce((acc, score) => acc + score, 0);
console.log(totalJediScore);
